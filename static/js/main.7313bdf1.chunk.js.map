{"version":3,"sources":["components/Message/Message.js","components/ChatWindow/ChatWindow.js","components/ChatInput/ChatInput.js","components/Chat/Chat.js","App.js","reportWebVitals.js","index.js"],"names":["Message","props","className","user","message","ChatWindow","chat","map","m","Date","now","Math","random","ChatInput","useState","setUser","setMessage","onSubmit","e","preventDefault","sendMessage","alert","htmlFor","placeholder","id","name","value","onChange","target","type","Chat","connection","setConnection","setChat","lastChat","useRef","current","useEffect","hubConnection","HubConnectionBuilder","withUrl","withAutomaticReconnect","build","start","then","console","log","on","updateChat","push","catch","error","a","chatMessage","_connectionStarted","send","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7313bdf1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './Message.css'\r\n\r\nconst Message = (props) => {\r\n  return (\r\n    <div className=\"message\">\r\n    <p className=\"userName\"><strong>{props.user}</strong></p>\r\n    <p className=\"userMessage\">{props.message}</p>\r\n    <hr/>\r\n    </div> \r\n  )\r\n}\r\n\r\nexport default Message;","import React from \"react\";\r\nimport Message from \"../Message/Message\";\r\n\r\nconst ChatWindow = (props) => {\r\n  const chat = props.chat.map(m => <Message\r\n    key={Date.now() * Math.random()}\r\n    user={m.user}\r\n    message={m.message}/>);\r\n\r\n    return (\r\n      <div>\r\n        {chat}\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default ChatWindow;","import React, {useState} from 'react';\r\n\r\nimport './ChatInput.css';\r\n\r\nconst ChatInput = (props) => {\r\n  const [user, setUser] = useState('');\r\n  const [message, setMessage] = useState('');\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    const isUserProvided = user && user !== '';\r\n    const isMessageProvided = message && message !== '';\r\n    if(isUserProvided && isMessageProvided){\r\n      return props.sendMessage(user, message);\r\n    }\r\n    alert(\"Informe o usuário e a mensagem\");\r\n  }\r\n\r\n  const onUserUpdate = (e) => {\r\n    setUser(e.target.value);\r\n  }\r\n\r\n  const onMessageUpdate = (e) => {\r\n    setMessage(e.target.value);\r\n  }\r\n  \r\n  return (\r\n    <div className='input'>\r\n    <form onSubmit={onSubmit} >\r\n      <label className='lblUsuario' htmlFor='user'>Usuário:</label>\r\n      <br/>\r\n      <input\r\n      placeholder='Digite seu nome'\r\n      className='inputUsuario'\r\n      id='user'\r\n      name='user'\r\n      value={user}\r\n      onChange={onUserUpdate}\r\n      ></input>\r\n      <br/> \r\n      <label className='lblMensagem' htmlFor='message'>Mensagem:</label>\r\n      <br/>\r\n      <input\r\n      placeholder='Digite sua mensagem'\r\n      className='inputMessage'\r\n      type=\"text\"\r\n      id='message'\r\n      name='message'\r\n      value={message}\r\n      onChange={onMessageUpdate}\r\n      >\r\n      </input>\r\n      <br/>\r\n      <button className='btnInput' type='submit'>Enviar</button>\r\n      </form>\r\n      </div>\r\n  )  \r\n}\r\n\r\nexport default ChatInput;","import React ,{useState, useEffect, useRef}from \"react\";\r\nimport { HubConnectionBuilder } from \"@microsoft/signalr\";\r\n\r\nimport ChatWindow from \"../ChatWindow/ChatWindow\";\r\nimport ChatInput from \"../ChatInput/ChatInput\";\r\n\r\nimport './Chat.css';\r\n\r\nconst Chat = () => {\r\n  const [connection, setConnection] = useState(null);\r\n  const [chat, setChat] = useState([]);\r\n  const lastChat = useRef(null);\r\n\r\n  lastChat.current = chat;\r\n  useEffect(() => {\r\n    const hubConnection = new HubConnectionBuilder()\r\n    .withUrl(\"https://chatservidor20211213145151.azurewebsites.net/chat\")\r\n    .withAutomaticReconnect()\r\n    .build();\r\n    setConnection(hubConnection);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if(connection){\r\n      connection.start().then(() => {\r\n        console.log(\"Conectado! \");\r\n        connection.on(\"ReceiveMessage\", message => {\r\n          const updateChat = [...lastChat.current];\r\n          updateChat.push(message);\r\n          setChat(updateChat);\r\n        })\r\n      }).catch(error => {\r\n        console.log(\"Falha na conexão: \" + error);\r\n      })\r\n    }\r\n  }, [connection]);\r\n\r\n  const sendMessage = async (user, message) => {\r\n    const chatMessage = {\r\n      user: user,\r\n      message: message\r\n    };\r\n\r\n    if(connection.connection._connectionStarted){\r\n      try{\r\n        console.log(\"Enviando mensagem...\")\r\n        await connection.send('SendMessage', chatMessage);\r\n      }\r\n      catch(error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    else{\r\n      alert(\"Nenhuma conexão estabelecida ainda!\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"messageContainer\">\r\n      <ChatInput sendMessage={sendMessage} />\r\n      <hr/>    \r\n      </div>\r\n      <ChatWindow chat={chat} />  \r\n    </div>\r\n  )\r\n}\r\nexport default Chat;","import React from 'react';\nimport Chat from './components/Chat/Chat';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Chat />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}